<?php
namespace CloudVerve\ConditionalEditor;

/**
 * Plugin loader and dependency checker.
 * @since 0.1.0
 */
class Plugin {

  public static $plugin_file;
  public static $plugin_identifier;
  public static $config;
  public static $textdomain;
  //public static $prefix;

  function __construct() {

    self::$plugin_file = trailingslashit( dirname( __DIR__ ) ) . 'conditional-editor.php';
    self::$plugin_identifier = $this->get_plugin_identifier();
    self::$config = $this->get_plugin_config();
    self::$textdomain = self::$config->slug;

    // Check dependencies
    register_activation_hook( self::$plugin_identifier, array( $this, 'activate' ) );

    // Load plugin after Carbon Fields is initialized
    add_action( 'carbon_fields_fields_registered', array( $this, 'load_plugin' ) );

  }

  /**
    * Load the plugin
    *
    * @since 0.1.0
    */
  public function load_plugin() {

    // Create settings page(s)
    Settings::init();

    // Perform plugin logic
    Core::init();

  }

  /**
    * Check plugin dependencies on activation.
    *
    * @since 0.1.0
    */
  public function activate() {

    $notices = [];

    // Check PHP version
    if( version_compare( phpversion(), $this->config->dependencies->php, '<' ) ) {
      $notices[] = __( 'This plugin is not supported on versions of PHP below', self::$textdomain ) . ' ' . $this->config->dependencies->php . '.' ;
    }

    // Check Carbon Fields version
    $cf_version = defined('\\Carbon_Fields\\VERSION') ? current( explode( '-', \Carbon_Fields\VERSION ) ) : null;
    if ( $cf_version && version_compare( $cf_version, $version, '<' ) ) {
      $notices[] = __( 'An outdated version of Carbon Fields has been detected:', self::$textdomain ) . ' ' . $cf_version . ' (&gt;= ' . self::$config->get( $this->config->dependencies->php ) . ' ' . __( 'required', self::$textdomain ) . ').' . ' <strong>' . $this->get_plugin_meta( 'Name' ) . '</strong> ' . __( 'deactivated.', self::$textdomain ) ;
    }

    if( $notices ) {

      deactivate_plugins( self::$plugin_identifier );

      $notices = '<ul><li>' . implode( "</li>\n<li>", $notices ) . '</li></ul>';
      die( $notices );

    }

  }

  /**
    * Get plugin header meta field value(s)
    *
    * @param string $field The field label of the value to retrieve
    * @return mixed The field value string or an array of all values
    * @since 0.1.0
    */
  private function get_plugin_identifier() {

    $file = explode( DIRECTORY_SEPARATOR, self::$plugin_file );
    return implode( DIRECTORY_SEPARATOR, array_slice( $file, -2, 2 ) );

  }

  /**
    * Get plugin configuration from plugin.json
    *
    * @param string $field The field label of the value to retrieve
    * @since 0.1.0
    */
  private function get_plugin_config() {

    $config_file = trailingslashit( dirname( self::$plugin_file ) ) . 'plugin.json';
    return json_decode( file_get_contents( $config_file ) );

  }

  /**
    * Get plugin header meta field value(s)
    *
    * @param string $field The field label of the value to retrieve
    * @return mixed The field value string or an array of all values
    * @since 0.1.0
    */
  public function get_plugin_meta( $field = null ) {

    $plugin_data = get_plugin_data( self::$plugin_file );
    return $field ? $plugin_data[$field] : $plugin_data;

  }

  /**
    * Retrieves value from cache, if enabled/present, else returns value
    *    generated by callback().
    *
    * @param string $key Key value of cache to retrieve
    * @param function $callback Result to return/set if does not exist in cache
    * @param bool $network_global Set to true if global/network setting, false if site-specific
    * @return string Cached value of key
    * @since 0.1.0
    */
  public function get_cache_object( $key = null, $callback, $network_global = false ) {

    $object_cache_group = self::$config->object_cache->group;
    //var_dump( $object_cache_group );
    if( is_multisite() ) $object_cache_group .= '_' . get_current_site()->id;
    $object_cache_expire = self::$config->object_cache->expire;

    $result = null;

    // Set key variable
    $object_cache_key = $key . ( is_multisite() && !$network_global && get_current_blog_id() ? '_' . get_current_blog_id() : '' );
    $cache_hit = false;

    // Try to get the value of the cache
    $result = wp_cache_get( $object_cache_key, $object_cache_group, false, $cache_hit );
    if( $result && is_serialized( $result ) ) $result = unserialize( $result );

    // If cache miss or caching is disabled, set & return the value from $callback()
    if( !$cache_hit ) {
      $result = $callback();
      wp_cache_set( $object_cache_key, ( is_array( $result ) || is_object( $result ) || is_bool( $result ) ? serialize( $result ) : $result ), $object_cache_group, $object_cache_expire);
    }

    return $result;

  }

  /**
    * Get plugin setting by field name, with caching
    *
    * @param string $field The field key
    * @param bool $network Retrieve setting from network (true) or site (false)
    * @return mixed The field value
    * @since 0.1.0
    */
  public function get_carbon_plugin_option( $key ) {

    $key = self::prefix( $key );

    // Attempt to get value from cache, else fetch value from database
    return self::get_cache_object( $key, function() use ( &$key ) {
      return carbon_get_theme_option( $key );
    });

  }

  /**
    * Network alias for get_plugin_option()
    *
    * @param string $field The field key
    * @return mixed The field value
    * @since 0.1.0
    */
  public function get_carbon_network_option( $key ) {

    if( !defined( 'SITE_ID_CURRENT_SITE' ) ) return null;
    $site_id = SITE_ID_CURRENT_SITE;

    $key = self::prefix( $key );

    // Attempt to get value from cache, else fetch value from database
    return self::get_cache_object( $key, function() use ( &$site_id, &$key ) {
      return carbon_get_network_option( $site_id, $key );
    }, true );

  }

  /**
    * Add plugin prefix to variable
    *
    * @param string $field The string to add prefix
    * @param string $before Character(s) to add before the prefix
    * @param string $after Character(s) to add after the prefix
    * @since 0.1.0
    */
  public function prefix( $field, $before = '', $after = '_' ) {

    return $before . self::$config->prefix . $after . $field;

  }

  /**
    * Flush the plugin cache
    *
    * @since 0.1.0
    */
  public function flush_cache() {

    wp_cache_flush();

  }

}
?>
